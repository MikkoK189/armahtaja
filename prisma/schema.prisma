// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Operation {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  groups    Group[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  operations     Operation[]
  accounts      Account[]
  sessions      Session[]
  admin         Boolean?  @default(false)
  }

model Group {
  id        String     @default(cuid()) @id
  title     String
  slots     Slot[]
  operation Operation? @relation(fields: [operationId], references: [id])
  operationId String?
}

model Slot {
  id        String     @default(cuid()) @id
  title     String
  participant String?  @default("")
  accepted  Boolean?   @default(false)
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  }

  model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique@map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
  }

  model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  }

